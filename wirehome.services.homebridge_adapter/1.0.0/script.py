import os
import json


def initialize():
    # wirehome.debugger.enable()
    pass


def start():
    wirehome.http_server.register_route(
        "wirehome.homebridge_adapter.getName",
        "api/v1/service.wirehome.homebridge_adapter/getName",
        __getName_request_handler__)

    wirehome.http_server.register_route(
        "wirehome.homebridge_adapter.getActive",
        "api/v1/service.wirehome.homebridge_adapter/getActive",
        __getActive_request_handler__)

    wirehome.http_server.register_route(
        "wirehome.homebridge_adapter.getCurrentTemperature",
        "api/v1/service.wirehome.homebridge_adapter/getCurrentTemperature",
        __getCurrentTemperature_request_handler__)

    wirehome.http_server.register_route(
        "wirehome.homebridge_adapter.getOn",
        "api/v1/service.wirehome.homebridge_adapter/getOn",
        __getOn_request_handler__)

    wirehome.http_server.register_route(
        "wirehome.homebridge_adapter.setOn",
        "api/v1/service.wirehome.homebridge_adapter/setOn",
        __setOn_request_handler__)

    __update_configuration__()

    # process_result = wirehome.os.launch({
    #    "file_name": "homebridge"
    # })

    # print(process_result)


def stop():
    pass


def __update_configuration__():
    configuration = __generate_configuration__()

    filename = os.path.expanduser("~/.homebridge/config.json")
    file = open(filename, "w")
    try:
        file.write(json.dumps(configuration))
    except:
        file.close()


def __generate_configuration__():
    return {
        "bridge": __generate_bridge_configuration__(),
        "description": "Wirehome.Core accessory bridge.",
        "accessories": __generate_accessories_configuration__()
    }


def __generate_bridge_configuration__():
    return {
        "name": "Wirehome",
        "username": "10:11:72:65:68:6F",
        "pin": "843-12-905",
        "port": 10550,
        "description": "This configuration is generated by Wirehome.Core plugin 'service.wirehome.homebridge_adapter'."
    }


def __generate_accessories_configuration__():
    # Required homebridge plugin: homebridge-http-advanced-accessory
    # https://www.npmjs.com/package/homebridge-http-advanced-accessory

    base_uri = "http://127.0.0.1:80/api/v1/service.wirehome.homebridge_adapter/"

    accessories = []

    for component_uid in wirehome.component_registry.get_uids():
        is_excluded = wirehome.component_registry.get_setting(component_uid, "homebridge_adapter.exclude", False)
        if is_excluded:
            continue

        accessory = None

        if wirehome.component_registry.has_status(component_uid, "temperature.value"):
            accessory = {
                "accessory": "HttpAdvancedAccessory",
                "service": "TemperatureSensor",
                "forceRefreshDelay": 5,
                "urls": {
                    "getCurrentTemperature": {
                        "url": base_uri + "getCurrentTemperature?component_uid=" + component_uid
                    }
                }
            }

        if wirehome.component_registry.has_status(component_uid, "humidity.valueXXX"):
            accessory = {
                "accessory": "HttpAdvancedAccessory",
                "service": "HumiditySensor",
                "forceRefreshDelay": 5,
                "urls": {
                    "getCurrentHumidity": {
                        "url": base_uri + "getCurrentHumidity?component_uid=" + component_uid
                    }
                }
            }

        if wirehome.component_registry.has_status(component_uid, "power.state"):
            accessory = {
                "accessory": "HttpAdvancedAccessory",
                "service": "Switch",
                "forceRefreshDelay": 5,
                "urls": {
                    "getOn": {
                        "url": base_uri + "getOn?component_uid=" + component_uid
                    },
                    "setOn": {
                        "url": base_uri + "setOn?state={value}&component_uid=" + component_uid,
                        "httpMethod": "POST"
                    }
                }
            }

        if accessory != None:
            accessory["debug"] = False

            accessory["name"] = __get_display_name__(component_uid)

            accessory["urls"]["getName"] = {
                "forceRefreshDelay": 15,
                "url": base_uri + "getName?component_uid=" + component_uid
            }

            accessory["urls"]["getActive"] = {
                "forceRefreshDelay": 15,
                "url": base_uri + "getActive?component_uid=" + component_uid
            }

            accessories.append(accessory)

    return accessories


def __print_request_handler__(parameters):
    print(parameters)
    wirehome.log.information(parameters)


def __getCurrentTemperature_request_handler__(parameters):
    component_uid = parameters.get("parameters", {}).get("component_uid", None)
    if component_uid == None:
        return

    temperature = wirehome.component_registry.get_status(component_uid, "temperature.value")
    if temperature == None:
        return

    return {
        "status_code": 200,
        "content": {
            "data": str(temperature)
        }
    }


def __getOn_request_handler__(parameters):
    component_uid = parameters.get("parameters", {}).get("component_uid", None)
    if component_uid == None:
        return

    power_state = wirehome.component_registry.get_status(component_uid, "power.state")
    if power_state == None:
        return

    data = "0"

    if power_state == "on":
        data = "1"

    return {
        "status_code": 200,
        "content": {
            "data": data
        }
    }


def __getName_request_handler__(parameters):
    component_uid = parameters.get("parameters", {}).get("component_uid", None)
    if component_uid == None:
        return

    data = wirehome.component_registry.get_setting(component_uid, "homebridge_adapter.caption")
    if data == None:
        data = wirehome.component_registry.get_setting(component_uid, "app.caption")

    return {
        "status_code": 200,
        "content": {
            "data": data
        }
    }


def __getActive_request_handler__(parameters):
    component_uid = parameters.get("parameters", {}).get("component_uid", None)
    if component_uid == None:
        return

    data = "0"

    is_active = wirehome.component_registry.get_setting(component_uid, "is_enabled", True) != False
    if is_active:
        data = "1"

    return {
        "status_code": 200,
        "content": {
            "data": data
        }
    }


def __setOn_request_handler__(parameters):
    component_uid = parameters.get("parameters", {}).get("component_uid", None)
    if component_uid == None:
        return

    power_state = wirehome.component_registry.get_status(component_uid, "power.state")
    if power_state == None:
        return

    target_state = parameters.get("parameters", {}).get("state", None)

    command = {"type": "turn_on"}
    if target_state == "false":
        command = {"type": "turn_off"}

    wirehome.component_registry.process_message(component_uid, command)

    return {
        "status_code": 200
    }


def __turn_off_handler__(parameters):
    pass


def __get_status_handler__(parameters):
    pass


def get_debug_infomation(_):
    return {}


def __get_display_name__(component_uid):
    caption = wirehome.component_registry.get_setting(component_uid, "homebridge_adapter.caption")
    if caption == None:
        caption = wirehome.component_registry.get_setting(component_uid, "app.caption")

    if caption == None:
        caption = component_uid

    return caption
